from aiogram import Bot, Dispatcher, types, executor
import logging
import requests

# –¢–æ–∫–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
API_TOKEN = '7863328224:AAGsA6QAOcJ5MyfEOl2Ri17wW5tS_Su-fPM'

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∫—É–¥–∞ –ø—Ä–∏—Ö–æ–¥—è—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
ADMIN_ID = 442635815

# –í—Ç–æ—Ä–æ–π –±–æ—Ç (–¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
SECOND_BOT_TOKEN = "8006311746:AAGVsOpd67wjQrRAnbh7aXspYKlZvWQK0ns"
SECOND_BOT_CHAT_ID = 442635815  # –ú–æ–∂–µ—à—å –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ ID –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

# –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
state = {}

# –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥
services = {
    "–ò–∫—Ä–∞ —á–µ—Ä–Ω–∞—è 1 –∫–≥": 67000,
    "–ò–∫—Ä–∞ –∫—Ä–∞—Å–Ω–∞—è –≥–æ—Ä–±—É—à–∞ 1 –∫–≥": 12000,
    "–ò–∫—Ä–∞ –∫—Ä–∞—Å–Ω–∞—è –∫–µ—Ç–∞ 1 –∫–≥": 12000,
    "–ò–∫—Ä–∞ –∫—Ä–∞—Å–Ω–∞—è –Ω–µ—Ä–∫–∞ 1 –∫–≥": 12000,
    "–û—Ç–≤–µ–∑—Ç–∏ –í–∏—Å–∫–∞—Å–∞ –≤ –≥—Ä—É–º–º–∏–Ω–≥ (–ú–æ–π–∫–∞, —Å—É—à–∫–∞, –≤—ã—á–µ—Å—ã–≤–∞–Ω–∏–µ)": 3000,
    "–í–ø—É—Å—Ç–∏—Ç—å –≠–ª–∏—Å—É": 0,
    "–ü–æ—á–∏—Å—Ç–∏—Ç—å —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ –ø–µ—Ä–µ–¥ –æ—Ç—ä–µ–∑–¥–æ–º": 0,
    "–ù–∞–π—Ç–∏ –º–∞—Ç—å/—É—Å–ø–æ–∫–æ–∏—Ç—å –º–∞—Ç—å ‚Äî 2 –±–∏–ª–µ—Ç–∞ –≤ Ikra/Tajiri go": 40000
}

# –†–µ–∫–≤–∏–∑–∏—Ç—ã
payment_info = (
    "üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:\n\n"
    "1. –°–ë–ü: +7 985 146 75 27 ‚Äî –õ–æ–∂–∏–Ω—Å–∫–∏–π –ú–∞–∫—Å–∏–º –†–æ–º–∞–Ω–æ–≤–∏—á (–¢-–ë–ê–ù–ö)\n"
    "2. –ö–∞—Ä—Ç–∞: 5536 9139 7159 7972\n"
    "3. –ö—Ä–∏–ø—Ç–∞ (TRC20): TXb9zuap4hK37HWQFGmugWLrUftwd3b3JA\n\n"
    "‚ùó –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª –∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É."
)

# –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –≤—Ç–æ—Ä–æ–≥–æ –±–æ—Ç–∞
def notify_via_second_bot(text):
    url = f"https://api.telegram.org/bot{SECOND_BOT_TOKEN}/sendMessage"
    data = {
        "chat_id": SECOND_BOT_CHAT_ID,
        "text": text
    }
    requests.post(url, data=data)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_menu():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for name in services:
        keyboard.add(name)
    return keyboard

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=get_main_menu())

# –í—ã–±–æ—Ä —É—Å–ª—É–≥–∏
@dp.message_handler(lambda message: message.text in services)
async def select_service(message: types.Message):
    state[message.from_user.id] = {
        "service": message.text,
        "price": services[message.text],
        "step": "payment"
    }
    pay_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    pay_keyboard.add("–Ø –æ–ø–ª–∞—Ç–∏–ª", "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑")
    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {message.text}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {services[message.text]} ‚ÇΩ\n\n{payment_info}",
        reply_markup=pay_keyboard
    )

# –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞
@dp.message_handler(lambda message: message.text == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑")
async def cancel_order(message: types.Message):
    state.pop(message.from_user.id, None)
    await message.answer("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=get_main_menu())

# –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–Ø –æ–ø–ª–∞—Ç–∏–ª"
@dp.message_handler(lambda message: state.get(message.from_user.id, {}).get("step") == "payment" and message.text == "–Ø –æ–ø–ª–∞—Ç–∏–ª")
async def ask_comment(message: types.Message):
    state[message.from_user.id]["step"] = "comment"
    await message.answer("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–∞–¥—Ä–µ—Å, –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏ —Ç.–¥.):", reply_markup=types.ReplyKeyboardRemove())

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞
@dp.message_handler(lambda message: state.get(message.from_user.id, {}).get("step") == "comment")
async def confirm_payment(message: types.Message):
    user_state = state.get(message.from_user.id, {})
    text = (
        f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name} (@{message.from_user.username})\n"
        f"üì¶ –£—Å–ª—É–≥–∞: {user_state.get('service')}\n"
        f"üí∞ –°—É–º–º–∞: {user_state.get('price')} ‚ÇΩ\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {message.text}"
    )

    await bot.send_message(ADMIN_ID, text)
    notify_via_second_bot(text)

    await message.answer("–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ‚úÖ")
    state.pop(message.from_user.id, None)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=get_main_menu())

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
